name: Backend CI/CD

on:
  push:
    branches: ["main"]

jobs:
  build-and-push-to-gcr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # gcloud 인증 (SA 키 사용)
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # gcloud 설치/세팅
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Artifact Registry 로그인
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet

      # Docker 빌드 & 푸시
      - name: Build Docker Image
        run: |
          docker build \
            -t asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/dys-backend/dys-backend:${{ github.sha }} \
            .
      - name: Push Docker Image
        run: |
          docker push asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/dys-backend/dys-backend:${{ github.sha }}

  deploy-to-gke:
    needs: build-and-push-to-gcr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # ★ GKE 인증 플러그인 설치 (APT 방식)
      - name: Install GKE auth plugin (apt)
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

      # ★ kubectl 설치 (공식 바이너리)
      - name: Install kubectl
        run: |
          KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      # ★ kubectl이 gcloud 플러그인을 쓰도록 지정
      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # GKE 인증 컨텍스트 가져오기
      - name: Get GKE credentials
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud container clusters get-credentials dys-cluster --region asia-northeast3

      # 배포 이미지 교체 (sed 대신 kubectl set image 권장)
      - name: Deploy (set image)
        run: |
          kubectl set image deployment/dys-deployment dys-backend-container=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/dys-backend/dys-backend:${{ github.sha }}

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/dys-deployment --timeout=300s

      # 실패해도 항상 디버그 정보 뿌기
      - name: Debug on failure
        if: ${{ always() }}
        run: |
          echo "=== Deploy ==="
          kubectl get deploy dys-deployment -o wide
          echo "=== ReplicaSets ==="
          kubectl get rs -l app=dys-backend -o wide || true
          echo "=== Pods ==="
          kubectl get pods -l app=dys-backend -o wide || true
          echo "=== Events ==="
          kubectl get events --sort-by=.lastTimestamp | tail -n 100 || true

          # 첫 번째 비정상 파드 로그 확인
          POD=$(kubectl get pods -l app=dys-backend --no-headers | awk '$3!="Running"{print $1; exit}')
          if [ -n "$POD" ]; then
            echo "=== Describe $POD ==="
            kubectl describe pod "$POD" || true
            echo "=== Logs $POD ==="
            kubectl logs "$POD" -c dys-backend-container --tail=200 || true
            kubectl logs "$POD" -c dys-backend-container --previous --tail=200 || true
          fi
